/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/backtests/": {
    /** A simple ViewSet for viewing and editing Backtests. */
    get: operations["backtests_list"];
    /** A simple ViewSet for viewing and editing Backtests. */
    post: operations["backtests_create"];
  };
  "/api/backtests/{backtest_id}/": {
    /** A simple ViewSet for viewing and editing Backtests. */
    get: operations["backtests_retrieve"];
    /** A simple ViewSet for viewing and editing Backtests. */
    delete: operations["backtests_destroy"];
  };
  "/api/customer_access/": {
    get: operations["customer_access_retrieve"];
  };
  "/api/customer_detail/": {
    /** Get the current settings for the organization. */
    get: operations["customer_detail_retrieve"];
  };
  "/api/customer_summary/": {
    /** Get the current settings for the organization. */
    get: operations["customer_summary_list"];
  };
  "/api/customer_totals/": {
    /** Return current usage for a customer during a given billing period. */
    get: operations["customer_totals_list"];
  };
  "/api/customers/": {
    /** A simple ViewSet for viewing and editing Customers. */
    get: operations["customers_list"];
    /** A simple ViewSet for viewing and editing Customers. */
    post: operations["customers_create"];
  };
  "/api/customers/{customer_id}/": {
    /** A simple ViewSet for viewing and editing Customers. */
    get: operations["customers_retrieve"];
    /** A simple ViewSet for viewing and editing Customers. */
    delete: operations["customers_destroy"];
  };
  "/api/draft_invoice/": {
    /** Pagination-enabled endpoint for retrieving an organization's event stream. */
    get: operations["draft_invoice_retrieve"];
  };
  "/api/events/": {
    /** API endpoint that allows events to be viewed. */
    get: operations["events_list"];
  };
  "/api/experimental_to_active/": {
    post: operations["experimental_to_active_create"];
  };
  "/api/features/": {
    /** A simple ViewSet for viewing and editing Features. */
    get: operations["features_list"];
    /** A simple ViewSet for viewing and editing Features. */
    post: operations["features_create"];
  };
  "/api/features/{id}/": {
    /** A simple ViewSet for viewing and editing Features. */
    get: operations["features_retrieve"];
    /** A simple ViewSet for viewing and editing Features. */
    delete: operations["features_destroy"];
  };
  "/api/invoices/": {
    /** A simple ViewSet for viewing and editing Invoices. */
    get: operations["invoices_list"];
    /** A simple ViewSet for viewing and editing Invoices. */
    post: operations["invoices_create"];
  };
  "/api/invoices/{id}/": {
    /** A simple ViewSet for viewing and editing Invoices. */
    get: operations["invoices_retrieve"];
  };
  "/api/login/": {
    post: operations["login_create"];
  };
  "/api/logout/": {
    post: operations["logout_create"];
  };
  "/api/metrics/": {
    /** A simple ViewSet for viewing and editing Billable Metrics. */
    get: operations["metrics_list"];
    /** A simple ViewSet for viewing and editing Billable Metrics. */
    post: operations["metrics_create"];
  };
  "/api/metrics/{id}/": {
    /** A simple ViewSet for viewing and editing Billable Metrics. */
    get: operations["metrics_retrieve"];
    /** A simple ViewSet for viewing and editing Billable Metrics. */
    delete: operations["metrics_destroy"];
  };
  "/api/new_api_key/": {
    /** Revokes the current API key and returns a new one. */
    get: operations["new_api_key_retrieve"];
  };
  "/api/organization": {
    /** Get the current settings for the organization. */
    get: operations["organization_retrieve"];
  };
  "/api/organization/invite/": {
    post: operations["organization_invite_create"];
  };
  "/api/payment_providers/": {
    get: operations["payment_providers_list"];
    post: operations["payment_providers_create"];
  };
  "/api/period_metric_usage/": {
    /** Return current usage for a customer during a given billing period. */
    get: operations["period_metric_usage_retrieve"];
  };
  "/api/period_subscriptions/": {
    get: operations["period_subscriptions_retrieve"];
  };
  "/api/plan_versions/": {
    /** A simple ViewSet for viewing and editing PlanVersions. */
    post: operations["plan_versions_create"];
  };
  "/api/plan_versions/{version_id}/": {
    /** A simple ViewSet for viewing and editing PlanVersions. */
    patch: operations["plan_versions_partial_update"];
  };
  "/api/plans/": {
    /** A simple ViewSet for viewing and editing Products. */
    get: operations["plans_list"];
    /** A simple ViewSet for viewing and editing Products. */
    post: operations["plans_create"];
  };
  "/api/plans/{plan_id}/": {
    /** A simple ViewSet for viewing and editing Products. */
    get: operations["plans_retrieve"];
    /** A simple ViewSet for viewing and editing Products. */
    patch: operations["plans_partial_update"];
  };
  "/api/plans_by_customer/": {
    get: operations["plans_by_customer_retrieve"];
  };
  "/api/products/": {
    /** A simple ViewSet for viewing and editing Products. */
    get: operations["products_list"];
    /** A simple ViewSet for viewing and editing Products. */
    post: operations["products_create"];
  };
  "/api/products/{product_id}/": {
    /** A simple ViewSet for viewing and editing Products. */
    get: operations["products_retrieve"];
    /** A simple ViewSet for viewing and editing Products. */
    delete: operations["products_destroy"];
  };
  "/api/register/": {
    post: operations["register_create"];
  };
  "/api/session/": {
    get: operations["session_retrieve"];
  };
  "/api/subscriptions/": {
    /** A simple ViewSet for viewing and editing Subscriptions. */
    get: operations["subscriptions_list"];
    /** A simple ViewSet for viewing and editing Subscriptions. */
    post: operations["subscriptions_create"];
  };
  "/api/subscriptions/{subscription_id}/": {
    /** A simple ViewSet for viewing and editing Subscriptions. */
    get: operations["subscriptions_retrieve"];
    /** A simple ViewSet for viewing and editing Subscriptions. */
    patch: operations["subscriptions_partial_update"];
  };
  "/api/sync_customers/": {
    post: operations["sync_customers_create"];
  };
  "/api/track/": {
    post: operations["track_create"];
  };
  "/api/user/password/reset/": {
    /** Verifies the token and resets the password. */
    post: operations["user_password_reset_create"];
  };
  "/api/user/password/reset/init/": {
    post: operations["user_password_reset_init_create"];
  };
  "/api/users/": {
    /** A simple ViewSet for viewing and editing Users. */
    get: operations["users_list"];
    /** A simple ViewSet for viewing and editing Users. */
    post: operations["users_create"];
  };
  "/api/users/{id}/": {
    /** A simple ViewSet for viewing and editing Users. */
    get: operations["users_retrieve"];
  };
  "/api/webhooks/": {
    /** API endpoint that allows alerts to be viewed or edited. */
    get: operations["webhooks_list"];
    /** API endpoint that allows alerts to be viewed or edited. */
    post: operations["webhooks_create"];
  };
  "/api/webhooks/{id}/": {
    /** API endpoint that allows alerts to be viewed or edited. */
    get: operations["webhooks_retrieve"];
    /** API endpoint that allows alerts to be viewed or edited. */
    delete: operations["webhooks_destroy"];
  };
}

export interface components {
  schemas: {
    APIKeyCreateSuccess: {
      api_key: string;
    };
    /** @enum {string} */
    AggregationTypeEnum:
      | "count"
      | "sum"
      | "max"
      | "min"
      | "unique"
      | "latest"
      | "average";
    Alert: {
      type?: string;
      webhook_url?: string | null;
      name?: string;
    };
    AllSubstitutionResults: {
      substitution_results?: components["schemas"]["SingleSubstitution"][];
      /** Format: double */
      original_plans_revenue?: number;
      /** Format: double */
      new_plans_revenue?: number;
      /** Format: double */
      pct_revenue_change?: number;
    };
    BacktestCreate: {
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      substitutions: components["schemas"]["BacktestSubstitutionMulti"][];
      kpis: components["schemas"]["KpisEnum"][];
      backtest_name: string;
    };
    BacktestDetail: {
      backtest_name: string;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      /** Format: date-time */
      time_created?: string;
      kpis?: { [key: string]: unknown };
      status?: components["schemas"]["Status33bEnum"];
      backtest_id?: string;
      backtest_substitutions: components["schemas"]["BacktestSubstitution"][];
      backtest_results: components["schemas"]["AllSubstitutionResults"];
    };
    BacktestSubstitution: {
      new_plan: components["schemas"]["PlanVersion"];
      original_plan: components["schemas"]["PlanVersion"];
    };
    BacktestSubstitutionMulti: {
      new_plan: string;
      original_plans: string[];
    };
    BacktestSummary: {
      backtest_name: string;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      /** Format: date-time */
      time_created?: string;
      kpis?: { [key: string]: unknown };
      status?: components["schemas"]["Status33bEnum"];
      backtest_id?: string;
    };
    BatchEvent: {
      batch: components["schemas"]["Event"][];
    };
    BillableMetric: {
      event_name: string;
      property_name?: string | null;
      aggregation_type?: components["schemas"]["AggregationTypeEnum"];
      metric_type?: components["schemas"]["MetricTypeEnum"];
      billable_metric_name?: string;
      numeric_filters?: components["schemas"]["NumericFilter"][] | null;
      categorical_filters?: components["schemas"]["CategoricalFilter"][] | null;
      properties?: { [key: string]: unknown } | null;
    };
    CategoricalFilter: {
      property_name: string;
      operator: components["schemas"]["CategoricalFilterOperatorEnum"];
      comparison_value: { [key: string]: unknown };
    };
    /** @enum {string} */
    CategoricalFilterOperatorEnum: "isin" | "isnotin";
    Customer: {
      customer_name: string;
      customer_id?: string;
      /** Format: double */
      balance?: number;
    };
    CustomerDetail: {
      customer_id?: string;
      /** Format: email */
      email?: string | null;
      /** Format: double */
      balance?: number;
      customer_name: string;
      invoices: unknown[];
      /** Format: double */
      total_amount_due: number;
      subscriptions: components["schemas"]["SubscriptionCustomerDetail"][];
    };
    CustomerName: {
      name: string;
    };
    CustomerNameAndID: {
      name: string;
      customer_id?: string;
    };
    CustomerSummary: {
      customer_name: string;
      customer_id?: string;
      subscriptions: components["schemas"]["SubscriptionCustomerSummary"][];
    };
    CustomerWithRevenue: {
      customer_id?: string;
      /** Format: double */
      total_amount_due: number;
    };
    DayMetricUsage: {
      /** Format: date */
      date: string;
      customer_usages: { [key: string]: number };
    };
    DraftInvoice: {
      /** Format: double */
      cost_due: number;
      cost_due_currency: string;
      cust_connected_to_payment_provider?: boolean;
      org_connected_to_cust_payment_provider?: boolean;
      line_items: { [key: string]: unknown };
      organization: { [key: string]: unknown };
      customer: { [key: string]: unknown };
      subscription: { [key: string]: unknown };
    };
    Event: {
      event_name: string;
      properties?: { [key: string]: unknown } | null;
      /** Format: date-time */
      time_created: string;
      idempotency_id: string;
      customer_id: string;
      customer: string;
    };
    ExperimentalToActiveFailure: {
      status: components["schemas"]["Status956Enum"];
      detail: string;
    };
    ExperimentalToActiveRequest: {
      version_id: string;
    };
    ExperimentalToActiveSuccess: {
      status: components["schemas"]["StatusE96Enum"];
      detail: string;
    };
    Feature: {
      feature_name: string;
      feature_description?: string | null;
    };
    /** @enum {string} */
    FlatFeeBillingTypeEnum: "in_arrears" | "in_advance";
    GetCustomerAccessFailure: {
      status: components["schemas"]["Status956Enum"];
      detail: string;
    };
    GetCustomerAccessSuccess: {
      access: boolean;
      usages?: components["schemas"]["MetricUsage"][];
    };
    InitialPlanVersion: {
      flat_fee_billing_type: components["schemas"]["FlatFeeBillingTypeEnum"];
      /** Format: double */
      flat_rate: number;
      usage_billing_frequency: components["schemas"]["UsageBillingTypeEnum"];
      active_subscriptions: number;
      version: number;
      description?: string | null;
      /** Format: date-time */
      created_on: string;
      components?: components["schemas"]["PlanComponent"][] | null;
      created_by: string;
      version_id: string;
      features?: components["schemas"]["Feature"][] | null;
      status: components["schemas"]["StatusEe1Enum"];
    };
    Invoice: {
      /** Format: double */
      cost_due: number;
      cost_due_currency: string;
      /** Format: date-time */
      issue_date?: string;
      payment_status: components["schemas"]["PaymentStatusEnum"];
      cust_connected_to_payment_provider?: boolean;
      org_connected_to_cust_payment_provider?: boolean;
      external_payment_obj_id?: string | null;
      line_items: { [key: string]: unknown };
      organization: { [key: string]: unknown };
      customer: { [key: string]: unknown };
      subscription: { [key: string]: unknown };
    };
    /** @enum {string} */
    KpisEnum: "total_revenue";
    /** @enum {string} */
    MakeActiveTypeEnum:
      | "replace_immediately"
      | "replace_on_active_version_renewal"
      | "grandfather_active";
    MetricRevenue: {
      metric_name: string;
      /** Format: double */
      original_plan_revenue: number;
      /** Format: double */
      new_plan_revenue: number;
    };
    /** @enum {string} */
    MetricTypeEnum: "aggregation" | "stateful";
    MetricUsage: {
      metric_name: string;
      /** Format: double */
      metric_usage: number;
      /** Format: double */
      metric_limit: number;
      access: boolean;
    };
    NumericFilter: {
      property_name: string;
      operator: components["schemas"]["NumericFilterOperatorEnum"];
      /** Format: double */
      comparison_value: number;
    };
    /** @enum {string} */
    NumericFilterOperatorEnum: "gte" | "gt" | "eq" | "lt" | "lte";
    PaginatedEventList: {
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Event"][];
    };
    PatchedPlanUpdate: {
      plan_name?: string;
      status?: components["schemas"]["StatusC64Enum"];
    };
    PatchedPlanVersionUpdate: {
      description?: string | null;
      status?: components["schemas"]["StatusC64Enum"];
      make_active_type?: components["schemas"]["MakeActiveTypeEnum"];
      replace_immediately_type?: components["schemas"]["ReplaceImmediatelyTypeEnum"];
    };
    PatchedSubscriptionUpdate: {
      plan_id?: string;
      status?: components["schemas"]["SubscriptionUpdateStatusEnum"];
      auto_renew?: boolean;
      replace_immediately_type?: components["schemas"]["ReplaceImmediatelyTypeEnum"];
    };
    /** @enum {string} */
    PaymentProcessorEnum: "stripe";
    PaymentProviderPostRequest: {
      payment_processor: components["schemas"]["PaymentProcessorEnum"];
      data: { [key: string]: unknown };
    };
    PaymentProviderPostResponse: {
      payment_processor: components["schemas"]["PaymentProcessorEnum"];
      success: boolean;
      details: string;
    };
    /** @enum {string} */
    PaymentStatusEnum: "draft" | "paid" | "unpaid";
    PeriodMetricUsageResponse: {
      metrics: {
        [key: string]: components["schemas"]["PeriodSingleMetricUsage"];
      };
    };
    PeriodSingleMetricUsage: {
      data: components["schemas"]["DayMetricUsage"][];
      /** Format: double */
      total_usage: number;
      top_n_customers?: components["schemas"]["CustomerName"][];
      /** Format: double */
      top_n_customers_usage?: number;
    };
    PeriodSubscriptionsResponse: {
      period_1_total_subscriptions: number;
      period_1_new_subscriptions: number;
      period_2_total_subscriptions: number;
      period_2_new_subscriptions: number;
    };
    Plan: {
      plan_name: string;
      plan_duration: components["schemas"]["PlanDurationEnum"];
      product_id?: string | null;
      plan_id?: string;
      initial_version: components["schemas"]["InitialPlanVersion"];
      parent_plan_id?: string;
      target_customer_id?: string;
      parent_plan: components["schemas"]["PlanNameAndID"];
      target_customer: components["schemas"]["CustomerNameAndID"];
      /** Format: date-time */
      created_on: string;
      created_by: string;
      display_version: components["schemas"]["PlanVersion"];
      status: components["schemas"]["Status13eEnum"];
      num_versions: number;
      active_subscriptions: number;
    };
    PlanComponent: {
      billable_metric_name: string;
      billable_metric: components["schemas"]["BillableMetric"];
      /**
       * Format: double
       * @default 0
       */
      free_metric_units?: number | null;
      /**
       * Format: double
       * @default 0
       */
      cost_per_batch?: number | null;
      /**
       * Format: double
       * @default 1
       */
      metric_units_per_batch?: number | null;
      /** Format: double */
      max_metric_units?: number | null;
    };
    PlanDetail: {
      plan_name: string;
      plan_duration: components["schemas"]["PlanDurationEnum"];
      versions: components["schemas"]["PlanVersion"][];
      product_id: string;
      status?: components["schemas"]["Status13eEnum"];
      plan_id?: string;
      /** Format: date-time */
      created_on?: string;
      created_by: string;
    };
    /** @enum {string} */
    PlanDurationEnum: "month" | "year";
    PlanNameAndID: {
      plan_name: string;
      plan_id?: string;
    };
    PlanRepresentation: {
      plan_name: string;
      plan_id: string;
      /** Format: double */
      plan_revenue: number;
    };
    PlanUpdate: {
      plan_name: string;
      status: components["schemas"]["StatusC64Enum"];
    };
    PlanVersion: {
      description?: string | null;
      plan_id?: string;
      flat_fee_billing_type: components["schemas"]["FlatFeeBillingTypeEnum"];
      usage_billing_frequency: components["schemas"]["UsageBillingTypeEnum"];
      replace_plan_version_id?: string;
      /** Format: double */
      flat_rate: number;
      components?: components["schemas"]["PlanComponent"][] | null;
      features?: components["schemas"]["Feature"][] | null;
      make_active: boolean;
      make_active_type?: components["schemas"]["MakeActiveTypeEnum"];
      replace_immediately_type?: components["schemas"]["ReplaceImmediatelyTypeEnum"];
      version: number;
      version_id: string;
      active_subscriptions: number;
      created_by: string;
      /** Format: date-time */
      created_on: string;
      status: components["schemas"]["StatusEe1Enum"];
    };
    PlanVersionUpdate: {
      description?: string | null;
      status?: components["schemas"]["StatusC64Enum"];
      make_active_type?: components["schemas"]["MakeActiveTypeEnum"];
      replace_immediately_type?: components["schemas"]["ReplaceImmediatelyTypeEnum"];
    };
    PlansByNumCustomers: {
      results: components["schemas"]["SinglePlanNumCustomers"][];
      status: components["schemas"]["StatusE96Enum"];
    };
    Product: {
      name: string;
      description?: string | null;
      product_id?: string;
      status: components["schemas"]["ProductStatusEnum"];
    };
    /** @enum {string} */
    ProductStatusEnum: "active" | "deprecated";
    Registration: {
      register: components["schemas"]["RegistrationDetail"];
    };
    RegistrationDetail: {
      company_name: string;
      industry: string;
      email: string;
      password: string;
      username: string;
    };
    RegistrationResponse: {
      detail: string;
    };
    /** @enum {string} */
    ReplaceImmediatelyTypeEnum:
      | "end_current_subscription_and_bill"
      | "end_current_subscription_dont_bill"
      | "change_subscription_plan";
    RevenueDate: {
      /** Format: date */
      date: string;
      /** Format: double */
      original_plan_revenue: number;
      /** Format: double */
      new_plan_revenue: number;
    };
    SingleCustomerValue: {
      customer_id: string;
      customer_name: string;
      /** Format: double */
      value: number;
    };
    SinglePaymentProvider: {
      payment_provider_name: string;
      connected: boolean;
      /** Format: uri */
      redirect_url: string;
    };
    SinglePlanNumCustomers: {
      plan_name: string;
      num_customers: number;
      /** Format: double */
      percent_total: number;
    };
    SingleSubstitution: {
      substitution_name: string;
      original_plan: components["schemas"]["PlanRepresentation"];
      new_plan: components["schemas"]["PlanRepresentation"];
      /** Format: double */
      pct_revenue_change: number;
      results: components["schemas"]["SingleSubstitutionResults"];
    };
    SingleSubstitutionResults: {
      cumulative_revenue: components["schemas"]["RevenueDate"][];
      revenue_by_metric: components["schemas"]["MetricRevenue"][];
      top_customers: components["schemas"]["TopCustomers"];
    };
    /** @enum {string} */
    Status13eEnum: "active" | "archived" | "experimental";
    /** @enum {string} */
    Status33bEnum: "running" | "completed";
    /** @enum {string} */
    Status956Enum: "error";
    /** @enum {string} */
    StatusC64Enum: "active" | "archived";
    /** @enum {string} */
    StatusE96Enum: "success";
    /** @enum {string} */
    StatusEe1Enum:
      | "active"
      | "retiring"
      | "grandfathered"
      | "archived"
      | "inactive";
    Subscription: {
      customer_id: string;
      customer: components["schemas"]["Customer"];
      plan_id: string;
      billing_plan: components["schemas"]["PlanVersion"];
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date?: string;
      status?: string;
      auto_renew?: boolean;
      is_new?: boolean;
      subscription_id?: string;
    };
    SubscriptionCustomerDetail: {
      billing_plan_name: string;
      subscription_id?: string;
      /** Format: date-time */
      start_date: string;
      /** Format: date-time */
      end_date: string;
      auto_renew?: boolean;
      status?: components["schemas"]["SubscriptionCustomerDetailStatusEnum"];
    };
    /** @enum {string} */
    SubscriptionCustomerDetailStatusEnum: "active" | "ended" | "not_started";
    SubscriptionCustomerSummary: {
      billing_plan_name: string;
      /** Format: date-time */
      end_date: string;
      auto_renew?: boolean;
    };
    SubscriptionUpdate: {
      plan_id?: string;
      status?: components["schemas"]["SubscriptionUpdateStatusEnum"];
      auto_renew?: boolean;
      replace_immediately_type: components["schemas"]["ReplaceImmediatelyTypeEnum"];
    };
    /** @enum {string} */
    SubscriptionUpdateStatusEnum: "ended";
    SyncCustomerFailure: {
      status: components["schemas"]["Status956Enum"];
      detail: string;
    };
    SyncCustomerSuccess: {
      status: components["schemas"]["StatusE96Enum"];
      detail: string;
    };
    TopCustomers: {
      original_plan_revenue: components["schemas"]["SingleCustomerValue"][];
      new_plan_revenue: components["schemas"]["SingleCustomerValue"][];
      biggest_pct_increase: components["schemas"]["SingleCustomerValue"][];
      biggest_pct_decrease: components["schemas"]["SingleCustomerValue"][];
    };
    TrackEventFailure: {
      success: components["schemas"]["TrackEventFailureSuccessEnum"];
      failed_events: { [key: string]: unknown };
    };
    /** @enum {string} */
    TrackEventFailureSuccessEnum: "none";
    TrackEventSuccess: {
      success: components["schemas"]["TrackEventSuccessSuccessEnum"];
      failed_events?: { [key: string]: unknown };
    };
    /** @enum {string} */
    TrackEventSuccessSuccessEnum: "all" | "some";
    /** @enum {string} */
    UsageBillingTypeEnum:
      | "in_arrears"
      | "pay_as_you_go_quarterly"
      | "pay_as_you_go_monthly"
      | "pay_as_you_go_weekly";
    User: {
      /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
      username: string;
      password: string;
    };
  };
}

export interface operations {
  /** A simple ViewSet for viewing and editing Backtests. */
  backtests_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BacktestSummary"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Backtests. */
  backtests_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BacktestCreate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BacktestCreate"];
        "application/x-www-form-urlencoded": components["schemas"]["BacktestCreate"];
        "multipart/form-data": components["schemas"]["BacktestCreate"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Backtests. */
  backtests_retrieve: {
    parameters: {
      path: {
        backtest_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BacktestDetail"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Backtests. */
  backtests_destroy: {
    parameters: {
      path: {
        backtest_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  customer_access_retrieve: {
    parameters: {
      query: {
        customer_id: string;
        event_limit_type?: "free" | "total";
        event_name?: string;
        feature_name?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GetCustomerAccessSuccess"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["GetCustomerAccessFailure"];
        };
      };
    };
  };
  /** Get the current settings for the organization. */
  customer_detail_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerDetail"];
        };
      };
    };
  };
  /** Get the current settings for the organization. */
  customer_summary_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerSummary"][];
        };
      };
    };
  };
  /** Return current usage for a customer during a given billing period. */
  customer_totals_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CustomerWithRevenue"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Customers. */
  customers_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Customer"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Customers. */
  customers_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Customer"];
        "application/x-www-form-urlencoded": components["schemas"]["Customer"];
        "multipart/form-data": components["schemas"]["Customer"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Customers. */
  customers_retrieve: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Customers. */
  customers_destroy: {
    parameters: {
      path: {
        customer_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  /** Pagination-enabled endpoint for retrieving an organization's event stream. */
  draft_invoice_retrieve: {
    parameters: {
      query: {
        customer_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DraftInvoice"];
        };
      };
    };
  };
  /** API endpoint that allows events to be viewed. */
  events_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        c?: string;
        /** Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEventList"];
        };
      };
    };
  };
  experimental_to_active_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExperimentalToActiveSuccess"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ExperimentalToActiveFailure"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentalToActiveRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ExperimentalToActiveRequest"];
        "multipart/form-data": components["schemas"]["ExperimentalToActiveRequest"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Features. */
  features_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Feature"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Features. */
  features_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Feature"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Feature"];
        "application/x-www-form-urlencoded": components["schemas"]["Feature"];
        "multipart/form-data": components["schemas"]["Feature"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Features. */
  features_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this feature. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Feature"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Features. */
  features_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this feature. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  /** A simple ViewSet for viewing and editing Invoices. */
  invoices_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Invoices. */
  invoices_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Invoice"];
        "application/x-www-form-urlencoded": components["schemas"]["Invoice"];
        "multipart/form-data": components["schemas"]["Invoice"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Invoices. */
  invoices_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this invoice. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
    };
  };
  login_create: {
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  logout_create: {
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  /** A simple ViewSet for viewing and editing Billable Metrics. */
  metrics_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BillableMetric"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Billable Metrics. */
  metrics_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BillableMetric"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillableMetric"];
        "application/x-www-form-urlencoded": components["schemas"]["BillableMetric"];
        "multipart/form-data": components["schemas"]["BillableMetric"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Billable Metrics. */
  metrics_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this billable metric. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BillableMetric"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Billable Metrics. */
  metrics_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this billable metric. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  /** Revokes the current API key and returns a new one. */
  new_api_key_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["APIKeyCreateSuccess"];
        };
      };
    };
  };
  /** Get the current settings for the organization. */
  organization_retrieve: {
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  organization_invite_create: {
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  payment_providers_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SinglePaymentProvider"][];
        };
      };
    };
  };
  payment_providers_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaymentProviderPostResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentProviderPostRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PaymentProviderPostRequest"];
        "multipart/form-data": components["schemas"]["PaymentProviderPostRequest"];
      };
    };
  };
  /** Return current usage for a customer during a given billing period. */
  period_metric_usage_retrieve: {
    parameters: {
      query: {
        end_date: string;
        start_date: string;
        top_n_customers?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PeriodMetricUsageResponse"];
        };
      };
    };
  };
  period_subscriptions_retrieve: {
    parameters: {
      query: {
        period_1_end_date: string;
        period_1_start_date: string;
        period_2_end_date: string;
        period_2_start_date: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PeriodSubscriptionsResponse"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing PlanVersions. */
  plan_versions_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PlanVersion"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanVersion"];
        "application/x-www-form-urlencoded": components["schemas"]["PlanVersion"];
        "multipart/form-data": components["schemas"]["PlanVersion"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing PlanVersions. */
  plan_versions_partial_update: {
    parameters: {
      path: {
        version_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlanVersionUpdate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPlanVersionUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlanVersionUpdate"];
        "multipart/form-data": components["schemas"]["PatchedPlanVersionUpdate"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  plans_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plan"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  plans_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Plan"];
        "application/x-www-form-urlencoded": components["schemas"]["Plan"];
        "multipart/form-data": components["schemas"]["Plan"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  plans_retrieve: {
    parameters: {
      path: {
        plan_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlanDetail"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  plans_partial_update: {
    parameters: {
      path: {
        plan_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlanUpdate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPlanUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlanUpdate"];
        "multipart/form-data": components["schemas"]["PatchedPlanUpdate"];
      };
    };
  };
  plans_by_customer_retrieve: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlansByNumCustomers"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  products_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  products_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Product"];
        "application/x-www-form-urlencoded": components["schemas"]["Product"];
        "multipart/form-data": components["schemas"]["Product"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  products_retrieve: {
    parameters: {
      path: {
        product_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Products. */
  products_destroy: {
    parameters: {
      path: {
        product_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  register_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RegistrationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Registration"];
        "application/x-www-form-urlencoded": components["schemas"]["Registration"];
        "multipart/form-data": components["schemas"]["Registration"];
      };
    };
  };
  session_retrieve: {
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  /** A simple ViewSet for viewing and editing Subscriptions. */
  subscriptions_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Subscriptions. */
  subscriptions_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Subscription"];
        "application/x-www-form-urlencoded": components["schemas"]["Subscription"];
        "multipart/form-data": components["schemas"]["Subscription"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Subscriptions. */
  subscriptions_retrieve: {
    parameters: {
      path: {
        subscription_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Subscriptions. */
  subscriptions_partial_update: {
    parameters: {
      path: {
        subscription_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionUpdate"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedSubscriptionUpdate"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSubscriptionUpdate"];
        "multipart/form-data": components["schemas"]["PatchedSubscriptionUpdate"];
      };
    };
  };
  sync_customers_create: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SyncCustomerSuccess"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["SyncCustomerFailure"];
        };
      };
    };
  };
  track_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["TrackEventSuccess"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["TrackEventFailure"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchEvent"];
        "application/x-www-form-urlencoded": components["schemas"]["BatchEvent"];
        "multipart/form-data": components["schemas"]["BatchEvent"];
      };
    };
  };
  /** Verifies the token and resets the password. */
  user_password_reset_create: {
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  user_password_reset_init_create: {
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  /** A simple ViewSet for viewing and editing Users. */
  users_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  /** A simple ViewSet for viewing and editing Users. */
  users_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
        "application/x-www-form-urlencoded": components["schemas"]["User"];
        "multipart/form-data": components["schemas"]["User"];
      };
    };
  };
  /** A simple ViewSet for viewing and editing Users. */
  users_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this user. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** API endpoint that allows alerts to be viewed or edited. */
  webhooks_list: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Alert"][];
        };
      };
    };
  };
  /** API endpoint that allows alerts to be viewed or edited. */
  webhooks_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Alert"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Alert"];
        "application/x-www-form-urlencoded": components["schemas"]["Alert"];
        "multipart/form-data": components["schemas"]["Alert"];
      };
    };
  };
  /** API endpoint that allows alerts to be viewed or edited. */
  webhooks_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this alert. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Alert"];
        };
      };
    };
  };
  /** API endpoint that allows alerts to be viewed or edited. */
  webhooks_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this alert. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
}

export interface external {}
