name: Python SDK Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  python-sdk-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_USER: lotus
          POSTGRES_PASSWORD: lotus
          SSLMODE: PREFER
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      redis:
        image: redis
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    environment: Development

    env:
      REDIS_HOST: localhost
      DJANGO_SETTINGS_MODULE: "lotus.settings"
      PYTHONPATH: "."
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      STRIPE_LIVE_SECRET_KEY: ${{ secrets.STRIPE_LIVE_SECRET_KEY }}
      STRIPE_TEST_SECRET_KEY: ${{ secrets.STRIPE_TEST_SECRET_KEY }}
      DEBUG: False
      KAFKA_URL: "localhost:9092"
      PYTHONDONTWRITEBYTECODE: 1
      LOTUS_HOST: "http://localhost:8000"

    steps:
      - uses: actions/checkout@v3

      - name: start redpanda
        uses: redpanda-data/github-action@v0.1.3
        with:
          version: "latest"

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel && pipenv update

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv install --deploy --dev

      - name: Migrate
        run: |
          pipenv run python manage.py migrate --noinput

      - name: Capture Outputs
        run: |
        OUTPUTS=$(pipenv run python manage.py postman_ci_outputs)
        API_KEY=$(echo "$OUTPUTS" | grep "KEY=" | cut -d= -f2)
        PLAN_ID=$(echo "$OUTPUTS" | grep "PLAN_ID=" | cut -d= -f2)
        ADDON_ID=$(echo "$OUTPUTS" | grep "ADDON_ID=" | cut -d= -f2)
        echo "LOTUS_API_KEY=$API_KEY" >> $GITHUB_ENV
        echo "LOTUS_PLAN_ID=$PLAN_ID" >> $GITHUB_ENV
        echo "LOTUS_ADDON_ID=$ADDON_ID" >> $GITHUB_ENV
        

      - name: Run server
        run: |
          pipenv run python manage.py runserver &

      - name: Checkout lotus-python
        run: |
          pip install lotus-python

      - name: Run tests
        run: |
          pipenv run pytest lotus-python